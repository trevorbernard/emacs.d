#+TITLE: Emacs Configuration
#+AUTHOR: Trevor Bernard
#+LANGUAGE: en

* Configuration

#+BEGIN_QUOTE
This is my emacs, there are many like it, but this one is mine...
#+END_QUOTE

** Getting Started

The very first thing you need to have installed is a recent version of
Emacs. I'm in the middle of converting my =package.el= configuration
to =use-package=. I'm unsure what is the minimum supported version
anymore but Emacs 29.x includes eglot and use-package.

I strongly suggest you remap your cap locks key to control to help
reduce the onset of Emacs pinky. I even go further and have a new key
binding for =M-x=, so you are hitting =Ctrl= instead of =Alt=.

You will need the following already installed for this configuration
to run correctly.

Install the [[https://github.com/tonsky/FiraCode][Fira Code Retina]] font because it's beautiful and makes for
a wonderful font. You will need aspell installed in order to user
Flymake mode. Clojure mode requires [[https://leiningen.org/][leiningen]].

** Emacs Initialization

#+begin_src emacs-lisp
  (require 'use-package)
#+end_src

Set the default GC threshold to be 100MB to increase startup
performance. Reset back to default at the end of file.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 1024 1024 100))
#+end_src

I like to have my Emacs clean, chrisp, and minimal. Removing the menu
bar, tool bar, and scroll bar frees some space and it helps remove
dependency on the mouse. Protip: Learn the Emacs navigation key
strokes until they are second nature. You can thank me later.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (dolist (mode '(menu-bar-mode tool-bar-mode scroll-bar-mode))
    (when (fboundp mode) (funcall mode -1)))

  (when window-system
    ;;  (add-to-list 'default-frame-alist '(alpha . (95 . 50)))
    ;;  (set-frame-parameter (selected-frame) 'alpha '(95 . 50))
    (set-frame-font "Fira Code Retina 20" nil t))

  ;; some breathing room
  (set-fringe-mode 10)
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

Load theme

#+begin_src emacs-lisp
  (use-package timu-spacegrey-theme
    :ensure t
    :config
    (load-theme 'timu-spacegrey t))

  (use-package mood-line
    :config (mood-line-mode))
#+end_src


Experimenting with parens

#+begin_src emacs-lisp
  ;; (use-package paren
  ;;   :config (show-paren-mode)
  ;;   :custom (show-paren-style 'expression))

  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src
** Personal

Dats me.

#+begin_src emacs-lisp
  (setq user-full-name "Trevor Bernard"
        user-mail-address "trevor.bernard@protonmail.com")
#+end_src

** Key Bindings

Ignore minimize functionality when you're in a GUI because it's very
annoying to accidently minimize your window.

#+begin_src emacs-lisp
  (when window-system
    (global-set-key "\C-z" 'ignore)
    (global-set-key "\C-x\C-z" 'ignore))
#+end_src

*** Invoke M-x without the Alt key

M-x is one of the most wildly used key combinations in Emacs but it's
also the most annoying. You have to scrunch your left thumb and fore
finger in the most uncomfortable RSI inducing way.

I choose to rebind M-x to C-x C-m because of an article Steve Yegge
wrote called: [[https://sites.google.com/site/steveyegge2/effective-emacs][Effective Emacs]]. This allows you to keep your fingers on
the home row if you have caps lock mapped to control. With some
practice, it will become intuitive.

#+begin_src emacs-lisp
  (global-set-key "\C-x\C-m" 'execute-extended-command)
  (global-set-key "\C-c\C-m" 'execute-extended-command)
#+end_src

* Preferences

** Global Preferences

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")

  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
  (setq interprogram-paste-function 'x-selection-value) ;
  (global-auto-revert-mode t) ; Auto revert buffers
  (ido-mode 1)
  (column-number-mode 1) ; Show column number
  (delete-selection-mode 1) ; Allow delete of selection
  (fset 'yes-or-no-p 'y-or-n-p) ; Shorten confirmation message
  (global-font-lock-mode 1) ; Syntax Highlighting
  (show-paren-mode 1) ; Highlight parenthesis
  ;; Highlight selected Regions
  (transient-mark-mode 1)
  ;; Make pgup/dn remember current line
  (setq scroll-preserve-screen-position t)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

Use spaces in favour of tabs because they are evil. But when there are
tabs show them as 8 spaces.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default c-basic-offset 4)
  (setq-default tab-width 8)
#+end_src

Limit the default fill mode to 80 characters

#+begin_src emacs-lisp
  (setq-default set-fill-column 80)
  (setq-default truncate-lines nil)
#+end_src

Ignore the stupid ring bell feature.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

Allow functions without issuing warnings

#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src

* Mac specific configuration

#+begin_src emacs-lisp
  ;;;###autoload
  (defun my-mac-config ()
    ;; Mac's ls doesn't support --dired
    (setq dired-use-ls-dired nil)

    ;; Move to trash when deleting stuff
    (setq delete-by-moving-to-trash t
          trash-directory "~/.Trash/emacs")

    ;; Don't open files from the workspace in a new frame
    (setq ns-pop-up-frames nil)

    ;; Open up links in Google Chrome
    (setq browse-url-browser-function 'browse-url-default-macosx-browser))

  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns))
    :config
    (exec-path-from-shell-initialize)
    (my-mac-config))
#+end_src

* Programming Languages

Bind projectile to =C-c p= and enable by default.

** Projectile Mode

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :commands (projectile-mode projectile-command-map)
    :init
    (setq projectile-project-search-path '("~/p/"))
    (setq projectile-keymap-prefix (kbd "C-c p"))
    (setq projectile-completion-system 'ivy)
    :config
    (projectile-mode +1)
    :bind-keymap
    ("C-c p" . projectile-command-map))
#+end_src

** Magit

=C-c= is reserved for the user. Add a more friendly binding for
=magit-file-dispatch=

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status)
    ("C-c g" . magit-file-dispatch))
#+end_src

** Paredit

Some handy dandy paredit shortcuts

On mac ^-left and ^-right are bought to Misson Control. Go to System
Preferences > Keyboard > Shortcuts > Mission Control and change the
settings for "Move left a space" and "Move right a space" or disable
them completely.

#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :bind
    (:map paredit-mode-map
          ("C-<right>" . paredit-forward-slurp-sexp)
          ("C-<left>" . paredit-forward-barf-sexp)
          ("C-<backspace>" . paredit-backward-kill-word)
          ("RET" . nil))
    :hook ((emacs-lisp-mode . paredit-mode)
           (lisp-mode . paredit-mode)
           (lisp-interaction-mode . paredit-mode)
           (scheme-mode . paredit-mode)
           (clojure-mode . paredit-mode)
           (cider-repl-mode . paredit-mode)
           (inf-clojure-mode-hook . paredit-mode)))
#+end_src

** Clojure

I don't like my cider to be bleeding edge since it's caused
compatibility problems in the past so pin it to melpa-stable.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t)

  (use-package company
    :ensure t
    :bind
    (:map company-active-map
          ("C-n". company-select-next)
          ("C-p". company-select-previous)
          ("M-<". company-select-first)
          ("M->". company-select-last)))

  (use-package clojure-mode
    :ensure t
    :config
    (setq show-trailing-whitespace 1)
    (setq clojure-align-forms-automatically t)
    (eldoc-add-command 'paredit-backward-delete 'paredit-close-round)
    (add-hook 'clojure-mode-hook #'subword-mode)
    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode))

  (use-package inf-clojure
    :ensure t
    :config
    (add-hook 'inf-clojure-mode-hook #'rainbow-delimiters-mode))

  (use-package cider
    :ensure t
    :config
    (setq nrepl-log-messages t)
    (setq cider-repl-use-clojure-font-lock t)
    (setq cider-repl-display-help-banner nil)
    (add-hook 'cider-mode-hook #'company-mode)
    (add-hook 'cider-repl-mode-hook #'company-mode)
    (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode))
#+end_src

I have long since used this key binding to jack into a repl. My
fingers are programmed this way.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-j") 'cider-jack-in)
#+end_src

When you hit =f3= at the end of the sexp in Clojure, it will copy and
evaluate the function into the current repl. I no longer use this
function but it might be useful to someone eventually.

#+begin_src emacs-lisp
  ;;;###autoload
  (defun my-last-expression ()
    "Return the last sexp."
    (buffer-substring-no-properties
     (save-excursion (backward-sexp) (point))
     (point)))

  ;;;###autoload
  (defun cider-execute-in-current-repl (expr)
    (if (not (get-buffer (cider-current-connection)))
        (message "No active nREPL connection.")
      (progn
        (set-buffer (cider-current-repl))
        (goto-char (point-max))
        (insert expr)
        (cider-repl-return))))

  ;;;###autoload
  (defun cider-eval-expression-at-point-in-repl ()
    (interactive)
    (let ((form (my-last-expression)))
      ;; Eat white
      (while (string-match "\\`\s+\\|\n+\\'" form)
        (setq form (replace-match "" t t form)))
      (cider-execute-in-current-repl form)))

  (with-eval-after-load 'cider-repl-mode-hook
    (local-set-key '[f3] 'cider-eval-expression-at-point-in-repl))
#+end_src

** Elisp

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
#+end_src

** Org Mode

I almost exclusively use =C-j= in place of hitting the enter key. The
problem is that it's bound to =org-return-indent= function. This is
very annoying in when you are in =org-mode=. So instead of trying to
remap my brain, I'll remap it to =newline=.

#+begin_src emacs-lisp
  (use-package ob-rust
    :ensure t)

  (use-package org
    :ensure ob-rust
    :bind
    (:map
     org-mode-map
     ("C-j" . org-return)
     ("C-c ]" . org-ref-insert-link)
     ("C-c l" . org-store-link)
     ("C-c a" . org-agenda)
     ("C-c c" . org-capture))
    :config
    (turn-on-auto-fill)
    (org-babel-do-load-languages
     'org-babel-load-languages '((rust . t)
                                 (shell . t))))
#+end_src

*** Exporting to PDF

In order to export to PDF, I choose to use basictex and install
packages only when they are missing.

#+begin_src bash
  brew reinstall --cask basictex
  sudo tlmgr update --self
  sudo tlmgr install wrapfig
  sudo tlmgr install capt-of
#+end_src

** JavaScript

#+begin_src emacs-lisp
  (use-package js
    :ensure t
    :config
    (setq js-indent-level 2))
#+end_src

** CSS

#+begin_src emacs-lisp
  (use-package css-mode
    :ensure t
    :config
    (setq css-indent-level 2)
    (setq css-indent-offset 2))
#+end_src

** Flyspell

#+begin_src emacs-lisp
  (use-package flyspell
    :ensure t
    :config
    (setq flyspell-issue-welcome-flag nil)
    (setq flyspell-issue-message-flag nil)
    (setq flyspell-mark-duplications-flag nil)
    (setq ispell-program-name "aspell")
    (setq ispell-list-command "list")
    (define-key flyspell-mouse-map [down-mouse-3] 'flyspell-correct-word)
    (define-key flyspell-mouse-map [mouse-3] 'undefined)
    :hook ((text-mode . flyspell-mode)
           (org-mode . flyspell-mode)
           (prog-mode . flyspell-prog-mode)
           (markdown-mode . flyspell-mode)))
#+end_src

** Markdown

#+begin_src emacs-lisp
  (use-package ox-gfm
    :ensure t)

  (use-package markdown-mode
    :ensure t
    :mode (("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . gfm-mode))

    )
#+end_src

** Git

Use diff-mode when editing a git commit message

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
#+end_src

** Terminal Emulation

Calling =M-x ansi-term= will prompt you for which shell you want to
spawn. TODO. Find a keybinding

#+begin_src elisp
  (defun my/term ()
    (interactive)
    (term "/bin/zsh"))
#+end_src

** Rust

Result is my language du jour. It's slowly becoming my favourite
programming language.

#+begin_src elisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1))

  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)

  (use-package lsp-mode
    :ensure t
    :config
    (add-hook 'lsp-mode-hook #'lsp-ui-mode))

  (use-package lsp-ui
    :ensure t
    :custom
    (lsp-ui-doc-enable nil))

  (use-package rustic
    :defer t
    :ensure t
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :custom
    (rustic-compile-command "cargo b --release")
    (rustic-default-clippy-arguments "--all-targets --all-features -- -D warnings")
    (rust-format-on-save t))
#+end_src

** ELISP

An Interactice Emacs Lisp Mode (IELM) gives you an Emacs Lisp shell.

#+begin_src elisp
  (use-package ielm
    :ensure t
    :bind
    (:map ielm-map
          ("C-m" . 'ielm-return)
          ("<return>" . 'ielm-return))
    :config
    (add-hook 'ielm-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'ielm-mode-hook #'paredit-mode))
#+end_src

** OCaml

#+begin_src elisp
  (use-package tuareg
    :ensure t)
#+end_src

** Nix

#+begin_src elisp
  (use-package nixpkgs-fmt
    :ensure t)

  (use-package nix-mode
    :mode ("\\.nix\\'" "\\.nix.in\\'")
    :ensure t
    :bind
    (:map nix-mode-map
          ("C-c C-f" . nixpkgs-fmt))
    :config
    (nixpkgs-fmt-on-save-mode))

  (use-package nix-drv-mode
    :ensure nix-mode
    :mode "\\.drv\\'")

  (use-package nix-shell
    :ensure nix-mode
    :commands (nix-shell-unpack nix-shell-configure nix-shell-build))

  (use-package nix-repl
    :ensure nix-mode
    :commands (nix-repl))
#+end_src

** Terraform

#+begin_src emacs-lisp
  (use-package terraform-mode
    :ensure t)
#+end_src

Reset the GC threshold back to default

** Misc

#+begin_src emacs-lisp
  (use-package csv-mode
    :ensure t)

  (use-package just-mode
    :ensure t
    :config
    (setq just-indent-offset 2))

  (use-package dockerfile-mode
    :ensure t)

  (use-package yaml-mode
    :ensure t)

  (use-package bnf-mode
    :ensure t)

  (use-package htmlize
    :ensure t)

  (use-package ag
    :ensure t)

  (use-package string-inflection
    :ensure t)

  (use-package hurl-mode
    :ensure t
    :mode (("\\.hurl\\'" . hurl-mode)))

  (use-package yasnippet
    :ensure t
    :defer 15 ;; takes a while to load so do it async
    :config
    (yas-reload-all)
    :hook
    (rust-mode . yas-minor-mode))
#+end_src

#+begin_src emacs-lisp
  (setq gc-cons-threshold 800000)
#+end_src
