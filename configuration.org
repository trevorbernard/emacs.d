#+TITLE: Emacs Configuration
#+AUTHOR: Trevor Bernard
#+LANGUAGE: en
#+PROPERTY: header-args :tangle yes

* Configuration

#+BEGIN_QUOTE
This is my emacs, there are many like it, but this one is mine...
#+END_QUOTE

** Getting Started

I currently use =29.x= on both Linux and Mac systems. YMMV on Windows
or different versions of Emacs.

You will need the following already installed for this configuration
to run correctly.

Install the [[https://github.com/tonsky/FiraCode][Fira Code Retina]] font because it's beautiful and makes for
a wonderful font. You will need aspell installed in order to user
Flymake mode. Clojure mode requires [[https://leiningen.org/][leiningen]].

I strongly suggest you remap your cap locks key to control to help
reduce the onset of Emacs pinky. I even go further and have a new key
binding for =M-x=, so you are hitting =Ctrl= instead of =Alt=.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)

  (require 'use-package)
#+end_src

** Emacs Initialization

I like to have my Emacs clean, chrisp, and minimal. Disable the menu
bar, tool bar, and scroll Protip: Learn the Emacs navigation key
strokes until they are second nature. You can thank me later.

#+begin_src emacs-lisp
  (when window-system
    (set-frame-font "Fira Code Retina 20" nil t))

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; some breathing room
  (set-fringe-mode 10)
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))

#+end_src

Set the default GC threshold to be 100MB to increase startup
performance. Reset back to default at the end of file.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 1024 1024 100))
#+end_src

** Package Settings

To improve startup performance, we’ll manually set up the load-path
and avoid calling =(package-initialize)=. By setting
=package--init-file-ensured= to t, we prevent =package.el= from
automatically initializing the package system. Additionally, we set
package-enable-at-startup to nil, ensuring packages won’t load
automatically at startup; use-package will manage package loading
instead.

#+begin_src emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/elpa"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+end_src

#+begin_src emacs-lisp
  (setq use-package-always-defer t
        use-package-verbose t)

  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+end_src

#+begin_src emacs-lisp
  (use-package timu-spacegrey-theme
    :ensure t
    :demand t
    :config
    (load-theme 'timu-spacegrey t))

  (use-package mood-line
    :ensure t
    :config (mood-line-mode))
#+end_src

Experimenting with parens

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :defer t
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src
** Personal

Dats me.

#+begin_src emacs-lisp
  (setq user-full-name "Trevor Bernard"
        user-mail-address "trevor.bernard@protonmail.com")
#+end_src

** Key Bindings

Ignore minimize functionality when you're in the GUI because it's very
annoying to accidentally minimize your window.

#+begin_src emacs-lisp
  (when window-system
    (keymap-global-set "C-z" 'ignore)
    (keymap-global-set "C-x C-z" 'ignore))
#+end_src

*** Invoke M-x without the Alt key

=M-x= is one of the most wildly used key combinations in Emacs but
it's also the most annoying. You have to scrunch your left thumb and
fore finger in the most uncomfortable RSI inducing way.

I choose to rebind =M-x= to =C-x C-m= because of an article Steve
Yegge wrote called: [[https://sites.google.com/site/steveyegge2/effective-emacs][Effective Emacs]]. This allows you to keep your
fingers on the home row if you have caps lock mapped to control. With
some practice, it will become second-nature.

#+begin_src emacs-lisp
  (keymap-global-set "C-x C-m" 'execute-extended-command)
  (keymap-global-set "C-c C-m" 'execute-extended-command)
#+end_src

* Development

Create a shortcut to the compile command

#+begin_src emacs-lisp
  (keymap-global-set "C-c C-c" 'compile)
#+end_src

* Preferences

** Tidy Up: Disabling Unnecessary File Artifacts

By default, Emacs creates backup files, auto-save files, and
lockfiles, which can clutter your file system. These features are not
necessary in modern times. Let’s disable them to keep your directories
clean.

#+begin_src emacs-lisp
  (setq
   make-backup-files nil
   auto-save-default nil
   create-lockfiles nil)
#+end_src

#+begin_src emacs-lisp
;;  (add-to-list 'load-path "~/.emacs.d/lisp/")
  (setq
   ;; Don't display the emacs apropos
   inhibit-startup-message t
   ;; Allow short answers 'y' or 'n'
   use-short-answers t
   ;; Make pgup/dn remember current line 
   scroll-preserve-screen-position t)

  ;; Auto revert buffers
  (global-auto-revert-mode t)
  ;; Show column number
  (column-number-mode 1)
  ;; Allow delete of selection
  (delete-selection-mode 1)
  ;; Syntax Highlighting
  (global-font-lock-mode 1)
  ;; Highlight parenthesis
  (show-paren-mode 1) 
  ;; Highlight selected Regions
  (transient-mark-mode 1)

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

Use spaces in favour of tabs because they are evil. But when there are
tabs show them as 8 spaces.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default c-basic-offset 4)
  (setq-default tab-width 8)
#+end_src

Limit the default fill mode to 80 characters

#+begin_src emacs-lisp
  (setq-default set-fill-column 80)
  (setq-default truncate-lines nil)
#+end_src

Ignore the stupid ring bell feature.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

Allow functions without issuing warnings

#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src

* Mac specific configuration

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns))
    :config
    (exec-path-from-shell-initialize)
    (setq 
     browse-url-browser-function 'browse-url-default-macosx-browser
     delete-by-moving-to-trash t
     dired-use-ls-dired nil
     ns-pop-up-frames nil
     trash-directory "~/.Trash/emacs"))
#+end_src

* Programming Languages

Bind projectile to =C-c p= and enable by default.

** Projectile Mode

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :commands (projectile-mode projectile-command-map)
    :init
    (setq projectile-project-search-path '("~/p/"))
    (setq projectile-keymap-prefix (kbd "C-c p"))
    (setq projectile-completion-system 'ivy)
    :config
    (projectile-mode +1)
    :bind-keymap
    ("C-c p" . projectile-command-map))
#+end_src

** Magit

=C-c= is reserved for the user. Add a more friendly binding for
=magit-file-dispatch=

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :commands (magit-status magit-file-dispatch)
    :bind
    ("C-x g" . magit-status)
    ("C-c g" . magit-file-dispatch))
#+end_src

** Paredit

Some handy dandy paredit shortcuts

On mac =^-left= and =^-right= are bought to Misson Control. Go to
`System Preferences > Keyboard > Shortcuts > Mission Control` and
change the settings for "Move left a space" and "Move right a space"
or disable them completely.

#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :bind
    (:map paredit-mode-map
          ("C-<right>" . paredit-forward-slurp-sexp)
          ("C-<left>" . paredit-forward-barf-sexp)
          ("C-<backspace>" . paredit-backward-kill-word)
          ("RET" . nil))
    :hook ((emacs-lisp-mode lisp-mode lisp-interaction-mode scheme-mode clojure-mode cider-repl-mode inf-clojure-mode-hook) . paredit-mode))
#+end_src

** Clojure

I don't like my cider to be bleeding edge since it's caused
compatibility problems in the past so pin it to melpa-stable.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :bind
    (:map company-active-map
          ("C-n". company-select-next)
          ("C-p". company-select-previous)
          ("M-<". company-select-first)
          ("M->". company-select-last)))

  (use-package clojure-mode
    :ensure t
    :defer t
    :config
    (setq show-trailing-whitespace 1)
    (setq clojure-align-forms-automatically t)
    (eldoc-add-command 'paredit-backward-delete 'paredit-close-round)
    (add-hook 'clojure-mode-hook #'subword-mode)
    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode))

  (use-package inf-clojure
    :ensure t
    :defer t
    :config
    (add-hook 'inf-clojure-mode-hook #'rainbow-delimiters-mode))

  (use-package cider
    :ensure t
    :defer t
    :commands cider-jack-in
    :custom
    (nrepl-log-messages t)
    (cider-repl-use-clojure-font-lock t)
    (cider-repl-display-help-banner nil)
    :config
    (add-hook 'cider-mode-hook #'company-mode)
    (add-hook 'cider-repl-mode-hook #'company-mode)
    (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode))
#+end_src

I have long since used this key binding to jack into a repl. My
fingers are programmed this way.

#+begin_src emacs-lisp
  (keymap-global-set "C-c C-j" 'cider-jack-in)
#+end_src

When you hit =f3= at the end of the sexp in Clojure, it will copy and
evaluate the function into the current repl. I no longer use this
function but it might be useful to someone eventually.

#+begin_src emacs-lisp
  ;;;###autoload
  (defun my-last-expression ()
    "Return the last sexp."
    (buffer-substring-no-properties
     (save-excursion (backward-sexp) (point))
     (point)))

  ;;;###autoload
  (defun cider-execute-in-current-repl (expr)
    (if (not (get-buffer (cider-current-connection)))
        (message "No active nREPL connection.")
      (progn
        (set-buffer (cider-current-repl))
        (goto-char (point-max))
        (insert expr)
        (cider-repl-return))))

  ;;;###autoload
  (defun cider-eval-expression-at-point-in-repl ()
    (interactive)
    (let ((form (my-last-expression)))
      ;; Eat white
      (while (string-match "\\`\s+\\|\n+\\'" form)
        (setq form (replace-match "" t t form)))
      (cider-execute-in-current-repl form)))

  (with-eval-after-load 'cider-repl-mode-hook
    (local-set-key '[f3] 'cider-eval-expression-at-point-in-repl))
#+end_src

** Elisp

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
#+end_src

** Org Mode

I almost exclusively use =C-j= in place of hitting the enter key. The
problem is that it's bound to =org-return-indent= function. This is
very annoying in when you are in =org-mode=. So instead of trying to
remap my brain, I'll remap it to =newline=.

#+begin_src emacs-lisp
  (use-package ob-rust
    :ensure t)

  (use-package org
    :ensure ob-rust
    :bind
    (:map
     org-mode-map
     ("C-j" . org-return)
     ("C-c ]" . org-ref-insert-link)
     ("C-c l" . org-store-link)
     ("C-c a" . org-agenda)
     ("C-c c" . org-capture))
    :config
    (turn-on-auto-fill)
    (org-babel-do-load-languages
     'org-babel-load-languages '((rust . t)
                                 (shell . t))))
#+end_src

*** Exporting to PDF

In order to export to PDF, I choose to use basictex and install
packages only when they are missing.

#+begin_src bash :tangle no
  brew reinstall --cask basictex
  sudo tlmgr update --self
  sudo tlmgr install wrapfig
  sudo tlmgr install capt-of
#+end_src

** JavaScript

#+begin_src emacs-lisp
  (use-package js
    :ensure t
    :config
    (setq js-indent-level 2))
#+end_src

** CSS

#+begin_src emacs-lisp
  (use-package css-mode
    :ensure t
    :config
    (setq css-indent-level 2)
    (setq css-indent-offset 2))
#+end_src

** Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :bind (:map flycheck-mode-map
                ("M-n" . flycheck-next-error) ; optional but recommended error navigation
                ("M-p" . flycheck-previous-error)))
#+end_src

** Flyspell

#+begin_src emacs-lisp
  (use-package flyspell
    :ensure t
    :config
    (setq flyspell-issue-welcome-flag nil)
    (setq flyspell-issue-message-flag nil)
    (setq flyspell-mark-duplications-flag nil)
    (setq ispell-program-name "aspell")
    (setq ispell-list-command "list")
    (define-key flyspell-mouse-map [down-mouse-3] 'flyspell-correct-word)
    (define-key flyspell-mouse-map [mouse-3] 'undefined)
    :hook ((text-mode . flyspell-mode)
           (org-mode . flyspell-mode)
           (prog-mode . flyspell-prog-mode)
           (markdown-mode . flyspell-mode)))
#+end_src

** Markdown

#+begin_src emacs-lisp
  (use-package ox-gfm
    :ensure t)

  (use-package markdown-mode
    :ensure t
    :mode (("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . gfm-mode))

    )
#+end_src

** Git

Use diff-mode when editing a git commit message

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
#+end_src

** Web Development

#+begin_src emacs-lisp
  (use-package treesit
    :mode (("\\.tsx\\'" . tsx-ts-mode)
           ("\\.js\\'"  . typescript-ts-mode)
           ("\\.mjs\\'" . typescript-ts-mode)
           ("\\.mts\\'" . typescript-ts-mode)
           ("\\.cjs\\'" . typescript-ts-mode)
           ("\\.ts\\'"  . typescript-ts-mode)
           ("\\.jsx\\'" . tsx-ts-mode)
           ("\\.json\\'" .  json-ts-mode)
           ("\\.yaml\\'" .  yaml-ts-mode)
           ("\\.Dockerfile\\'" . dockerfile-ts-mode))
    :preface
    (defun os/setup-install-grammars ()
      "Install Tree-sitter grammars if they are absent."
      (interactive)
      (dolist (grammar
               '((css . ("https://github.com/tree-sitter/tree-sitter-css" "v0.20.0"))
                 (bash "https://github.com/tree-sitter/tree-sitter-bash")
                 (html . ("https://github.com/tree-sitter/tree-sitter-html" "v0.20.1"))
                 (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "v0.21.2" "src"))
                 (json . ("https://github.com/tree-sitter/tree-sitter-json" "v0.20.2"))
                 (python . ("https://github.com/tree-sitter/tree-sitter-python" "v0.20.4"))
                 (go "https://github.com/tree-sitter/tree-sitter-go" "v0.20.0")
                 (markdown "https://github.com/ikatyang/tree-sitter-markdown")
                 (make "https://github.com/alemuller/tree-sitter-make")
                 (elisp "https://github.com/Wilfred/tree-sitter-elisp")
                 (cmake "https://github.com/uyha/tree-sitter-cmake")
                 (c "https://github.com/tree-sitter/tree-sitter-c")
                 (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
                 (toml "https://github.com/tree-sitter/tree-sitter-toml")
                 (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "tsx/src"))
                 (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src"))
                 (yaml . ("https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0"))))
        (add-to-list 'treesit-language-source-alist grammar)
        ;; Only install `grammar' if we don't already have it
        ;; installed. However, if you want to *update* a grammar then
        ;; this obviously prevents that from happening.
        (unless (treesit-language-available-p (car grammar))
          (treesit-install-language-grammar (car grammar)))))

    ;; Optional, but recommended. Tree-sitter enabled major modes are
    ;; distinct from their ordinary counterparts.
    ;;
    ;; You can remap major modes with `major-mode-remap-alist'. Note
    ;; that this does *not* extend to hooks! Make sure you migrate them
    ;; also
    (dolist (mapping
             '((python-mode . python-ts-mode)
               (css-mode . css-ts-mode)
               (typescript-mode . typescript-ts-mode)
               (js-mode . typescript-ts-mode)
               (js2-mode . typescript-ts-mode)
               (c-mode . c-ts-mode)
               (c++-mode . c++-ts-mode)
               (c-or-c++-mode . c-or-c++-ts-mode)
               (bash-mode . bash-ts-mode)
               (css-mode . css-ts-mode)
               (json-mode . json-ts-mode)
               (js-json-mode . json-ts-mode)
               (sh-mode . bash-ts-mode)
               (sh-base-mode . bash-ts-mode)))
      (add-to-list 'major-mode-remap-alist mapping))
    :config
    (os/setup-install-grammars))

#+end_src

** Rust

Rust is my language du jour. It's slowly becoming my favourite
programming language.

** TODO Move LSP specific configuration in it's own section

#+begin_src elisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1))

  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-doc-enable nil))

  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :hook
    ((tsx-ts-mode typescript-ts-mode js-ts-mode python-ts-mode) . lsp-deferred)
    :preface
  ;;  (setenv "LSP_USE_PLISTS" "true")

    (setq read-process-output-max (* 10 1024 1024)
          ;; gc-cons-threshold 200000000
          ;; lsp-use-plists t
          )

    (defun lsp-booster--advice-json-parse (old-fn &rest args)
      "Try to parse bytecode instead of json."
      (or
       (when (equal (following-char) ?#)
         (let ((bytecode (read (current-buffer))))
           (when (byte-code-function-p bytecode)
             (funcall bytecode))))
       (apply old-fn args)))

    (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
      "Prepend emacs-lsp-booster command to lsp CMDR."
      (let ((orig-result (funcall old-fn cmd test?)))
        (if (and (not test?)                             ;; for check lsp-server-present?
                 (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
                 lsp-use-plists
                 (not (functionp 'json-rpc-connection))  ;; native json-rpc
                 (executable-find "emacs-lsp-booster"))
            (progn
              (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
                (setcar orig-result command-from-exec-path))
              (message "Using emacs-lsp-booster for %s!" orig-result)
              (cons "emacs-lsp-booster" orig-result))
          orig-result)))
    :init
    (advice-add (if (progn (require 'json)
                           (fboundp 'json-parse-buffer))
                    'json-parse-buffer
                  'json-read)
                :around
                #'lsp-booster--advice-json-parse)
    (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command))

  (use-package rustic
    :defer t
    :ensure t
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :custom
    (rustic-compile-command "cargo b --release")
    (rustic-default-clippy-arguments "--all-targets --all-features -- -D warnings")
    (rust-format-on-save t)
    (rustic-ansi-faces ["black" "#bf616a" "#a3be8c" "#ecbe7b" "#2257a0" "#b48ead" "#4db5bd" "white"]))
#+end_src

** ELISP

An Interactice Emacs Lisp Mode (IELM) gives you an Emacs Lisp shell.

#+begin_src elisp
  (use-package ielm
    :ensure t
    :bind
    (:map ielm-map
          ("C-m" . 'ielm-return)
          ("<return>" . 'ielm-return))
    :config
    (add-hook 'ielm-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'ielm-mode-hook #'paredit-mode))
#+end_src

** OCaml

#+begin_src elisp
  (use-package tuareg
    :ensure t)
#+end_src

** Nix

#+begin_src elisp
  (use-package nixpkgs-fmt
    :ensure t)

  (use-package nix-mode
    :mode ("\\.nix\\'" "\\.nix.in\\'")
    :ensure t
    :bind
    (:map nix-mode-map
          ("C-c C-f" . nixpkgs-fmt))
    :config
    (nixpkgs-fmt-on-save-mode))

  (use-package nix-drv-mode
    :ensure nix-mode
    :mode "\\.drv\\'")

  (use-package nix-shell
    :ensure nix-mode
    :commands (nix-shell-unpack nix-shell-configure nix-shell-build))

  (use-package nix-repl
    :ensure nix-mode
    :commands (nix-repl))
#+end_src

** Terraform

#+begin_src emacs-lisp
  (use-package terraform-mode
    :ensure t)
#+end_src

Reset the GC threshold back to default

** Misc

#+begin_src emacs-lisp
  (use-package csv-mode
    :ensure t)

  (use-package just-mode
    :ensure t
    :config
    (setq just-indent-offset 2))

  (use-package dockerfile-mode
    :ensure t)

  (use-package yaml-mode
    :ensure t)

  (use-package bnf-mode
    :ensure t)

  (use-package htmlize
    :ensure t)

  (use-package ag
    :ensure t)

  (use-package string-inflection
    :ensure t)

  (use-package yasnippet
    :ensure t
    :defer 15 ;; takes a while to load so do it async
    :config
    (yas-reload-all)
    :hook
    (rust-mode . yas-minor-mode))
#+end_src

#+begin_src emacs-lisp
  (setq gc-cons-threshold 800000)
#+end_src
